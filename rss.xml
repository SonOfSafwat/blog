<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Abdelrhman Safwat]]></title><description><![CDATA[Software Engineering Blog]]></description><link>https://abdelrhmansafwat.com</link><generator>GatsbyJS</generator><lastBuildDate>Thu, 10 Sep 2020 06:00:29 GMT</lastBuildDate><item><title><![CDATA[test]]></title><description><![CDATA[test]]></description><link>https://abdelrhmansafwat.com/posts/test</link><guid isPermaLink="false">https://abdelrhmansafwat.com/posts/test</guid><pubDate>Thu, 10 Sep 2020 05:57:14 GMT</pubDate><content:encoded>&lt;p&gt;test&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Declarative and Imperative Programming]]></title><description><![CDATA[Declarative and Imperative Programming]]></description><link>https://abdelrhmansafwat.com/posts/declarative-and-imperative-programming</link><guid isPermaLink="false">https://abdelrhmansafwat.com/posts/declarative-and-imperative-programming</guid><pubDate>Wed, 09 Sep 2020 10:53:18 GMT</pubDate><content:encoded>&lt;p&gt;This excerpt is taken from Eric Elliot &lt;a href=&quot;https://medium.com/javascript-scene/master-the-javascript-interview-what-is-functional-programming-7f218c68b3a0&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;article&lt;/a&gt; about functional programming. &lt;/p&gt;
&lt;p&gt;Functional programming is a declarative paradigm, meaning that the program logic is expressed without explicitly describing the flow control.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Imperative&lt;/strong&gt; programs spend lines of code describing the specific steps used to achieve the desired results — the &lt;strong&gt;flow control: How&lt;/strong&gt; to do things.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Declarative&lt;/strong&gt; programs abstract the flow control process, and instead spend lines of code describing the &lt;strong&gt;data flow: What&lt;/strong&gt; to do. The &lt;em&gt;how&lt;/em&gt; gets abstracted away.&lt;/p&gt;
&lt;p&gt;For example, this &lt;strong&gt;imperative&lt;/strong&gt; mapping takes an array of numbers and returns a new array with each number multiplied by 2:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;doubleMap&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;numbers&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; doubled &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; numbers&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    doubled&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;numbers&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; doubled&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;doubleMap&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// [4, 6, 8]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This &lt;strong&gt;declarative&lt;/strong&gt; mapping does the same thing, but abstracts the flow control away using the functional &lt;code class=&quot;language-text&quot;&gt;Array.prototype.map()&lt;/code&gt; utility, which allows you to more clearly express the flow of data:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;doubleMap&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;numbers&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; numbers&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; n &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;doubleMap&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// [4, 6, 8]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Imperative&lt;/strong&gt; code frequently utilizes statements. A &lt;strong&gt;statement&lt;/strong&gt; is a piece of code which performs some action. Examples of commonly used statements include &lt;code class=&quot;language-text&quot;&gt;for&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;if&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;switch&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;throw&lt;/code&gt;, etc…&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Declarative&lt;/strong&gt; code relies more on expressions. An &lt;strong&gt;expression&lt;/strong&gt; is a piece of code which evaluates to some value. Expressions are usually some combination of function calls, values, and operators which are evaluated to produce the resulting value.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[How I created my personal blog with Gatsby, Netlify-CMS, and Github Pages]]></title><description><![CDATA[How I created my personal blog with Gatsby, Netlify-CMS, and Github Pages]]></description><link>https://abdelrhmansafwat.com/posts/create-blog</link><guid isPermaLink="false">https://abdelrhmansafwat.com/posts/create-blog</guid><pubDate>Wed, 02 Sep 2020 08:31:40 GMT</pubDate><content:encoded>&lt;p&gt;For the longest time I wanted to start a side project. I had troubles finding a project idea that could make that bulb light up. &lt;/p&gt;
&lt;p&gt;I’ve always loved helping out people and sharing my knowledge and a few months back I took a personality assessment which confirmed my suspicions about me being a &lt;a href=&quot;https://en.wikipedia.org/wiki/Maven&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Maven&lt;/a&gt;. I was chatting with my friend &lt;a href=&quot;https://twitter.com/chriseyre2000&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Chris Eyre&lt;/a&gt; and he suggested creating a blog; Hence, here we are. &lt;/p&gt;
&lt;p&gt;After going through twitter, articles on &lt;a href=&quot;https://dev.to/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Dev&lt;/a&gt; I decided to build my blog using Gatsby and Netlify-CMS. &lt;/p&gt;
&lt;p&gt;First step I headed out to Gatsby website trying to read a little about the framework where I found their &lt;a href=&quot;https://www.gatsbyjs.com/starters/?v=2&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;starter templates&lt;/a&gt;, I went through the templates shown and decided to use &lt;em&gt;gatsby-starter-lumen&lt;/em&gt;, it is ranked third on Gatsby template list with more than 1300+ stars; &lt;em&gt;at the time of writing this article.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Now that I’ve downloaded the template, it was time to start playing around and see its capabilities, and to be honest it was simple to understand, highly configurable. I began with changing the colors a little bit which was a breeze. One major thing I liked was the fact they had a &lt;code class=&quot;language-text&quot;&gt;config.js&lt;/code&gt; file where you could just specify your information and it would be reflected directly to the site. Now it’s time to hit &lt;code class=&quot;language-text&quot;&gt;gatsby develop&lt;/code&gt; and see the result and as expected everything was reflected and working as expected. &lt;/p&gt;
&lt;p&gt;Next step I had to do was to familiarize myself with Netlify-CMS, In order to login I had to do some extra steps: &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Edit &lt;code class=&quot;language-text&quot;&gt;config.yml&lt;/code&gt; which can be found under &lt;em&gt;./static/admin/&lt;/em&gt; and add this line &lt;code class=&quot;language-text&quot;&gt;local_backend: true&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;Start an auth server which you can start directly using the command &lt;code class=&quot;language-text&quot;&gt;npx netlify-cms-proxy-server&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Head to &lt;em&gt;&lt;a href=&quot;http://localhost:8000/admin&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;http://localhost:8000/admin&lt;/a&gt;&lt;/em&gt; and start adding/editing your posts and pages.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Moving to the interesting part, deployment and publishing. I decided to deploy and host my blog to Github using Github Pages; you can host your blog anywhere you’d like and one convenient option is netlify.com, they provide convenience and ease of use especially if you’re using Netlify-CMS. &lt;/p&gt;
&lt;p&gt;In order to deploy to Github, I had to implement a few changes to the template: &lt;/p&gt;
&lt;p&gt;First update &lt;code class=&quot;language-text&quot;&gt;config.yml&lt;/code&gt; to use Github as authentication provider instead of Netlify, you can do that by using the following lines of code&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;yaml&quot;&gt;&lt;pre class=&quot;language-yaml&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;backend&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; github
  &lt;span class=&quot;token key atrule&quot;&gt;repo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &amp;lt;&amp;lt;GITHUB_USERNAME/REPO_NAME&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;api_root&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; https&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;//api.github.com
  &lt;span class=&quot;token key atrule&quot;&gt;site_domain&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &amp;lt;&amp;lt;SITE_DOMAIN&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;base_url&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; https&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;//api.netlify.com
  &lt;span class=&quot;token key atrule&quot;&gt;auth_endpoint&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; auth&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Second step was to update &lt;code class=&quot;language-text&quot;&gt;package.json&lt;/code&gt; with my information instead of the creators’ information. &lt;/p&gt;
&lt;p&gt;Third item was deployment, the template uses &lt;code class=&quot;language-text&quot;&gt;gh-pages&lt;/code&gt; library to deploy releases. by default &lt;code class=&quot;language-text&quot;&gt;gh-pages&lt;/code&gt; creates a new branch with the same name and push the site to it, if you wish to change that you can use this simple script, it replaces the default branch name with &lt;code class=&quot;language-text&quot;&gt;release&lt;/code&gt; instead of &lt;code class=&quot;language-text&quot;&gt;gh-pages&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; ghpages &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;gh-pages&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// replace with your repo url&lt;/span&gt;
ghpages&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;publish&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
	&lt;span class=&quot;token string&quot;&gt;&apos;public&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
		branch&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;release&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
		repo&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;https://github.com/SonOfSafwat/blog.git&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
		console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Deploy Complete!&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now that everything is ready, time to go live. Head over to your repo on Github and from settings under Github Pages option you can choose which branch you wish to publish; I used &lt;code class=&quot;language-text&quot;&gt;release&lt;/code&gt; branch. And voila, my blog is live. &lt;/p&gt;
&lt;p&gt;If you wish to checkout the source code for the blog you can find it &lt;a href=&quot;https://github.com/SonOfSafwat/blog&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Here&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;If you have any questions or in need of any help please don’t hesitate to reach out&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://twitter.com/sonofsafwat&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.instagram.com/sonofsafwat/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Instagram&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.linkedin.com/in/abdelrhmansafwat/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Linkedin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;mailto:abdelrhman.safwat@gmail.com&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Email&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Regex Cheatsheet]]></title><description><![CDATA[Go to Regex cheat sheet to help me reading other people regular expressions ]]></description><link>https://abdelrhmansafwat.com/posts/regesx-cheat-sheet</link><guid isPermaLink="false">https://abdelrhmansafwat.com/posts/regesx-cheat-sheet</guid><pubDate>Wed, 19 Aug 2020 10:04:20 GMT</pubDate><content:encoded>&lt;h2 id=&quot;ranges&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#ranges&quot; aria-label=&quot;ranges permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Ranges&lt;/h2&gt;
&lt;p&gt;All Ranges are inclusive&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;[a-z]&lt;/strong&gt; ⇒ from a to z lower case only&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;[A-Z]&lt;/strong&gt; ⇒ from A to Z upper case only&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;[0-9]&lt;/strong&gt; ⇒ from 0 to 9&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;[a-f]&lt;/strong&gt; ⇒ from a to f&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;[g-p]&lt;/strong&gt; ⇒ from g to p&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;[#$%&amp;#x26;@]&lt;/strong&gt; ⇒ any of those symbols&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;[a-zA-Z0-9]&lt;/strong&gt; ⇒ all digits, lower and upper case letters.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;repeat-exact&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#repeat-exact&quot; aria-label=&quot;repeat exact permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Repeat exact&lt;/h2&gt;
&lt;p&gt;using the {} curly braces notation&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a{5} ⇒ will match “aaaaa”.&lt;/li&gt;
&lt;li&gt;n{3} ⇒ will match “nnn”.&lt;/li&gt;
&lt;li&gt;[a-z]{4} ⇒ will match any four-letter word such as&lt;/li&gt;
&lt;li&gt;[a-z]{6,} ⇒ will match any word with six or more letters.&lt;/li&gt;
&lt;li&gt;[a-z]{8,11} ⇒ will match any word between eight and 11 letters.&lt;/li&gt;
&lt;li&gt;[0-9]{11} ⇒ will match an 11-digit number.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;generic-selectors&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#generic-selectors&quot; aria-label=&quot;generic selectors permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Generic selectors&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;\d&lt;/strong&gt; ⇒ matches any digit that is the same as [0-9]&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;\w&lt;/strong&gt; ⇒ matches any letter, digit and underscore character&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;\s&lt;/strong&gt; ⇒ matches a whitespace character — that is, a space or tab&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;\t&lt;/strong&gt; ⇒ matches a tab character only&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;.&lt;/strong&gt; ⇒ match any digit, letter or symbol except newline.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;special-characters-nasty-ones&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#special-characters-nasty-ones&quot; aria-label=&quot;special characters nasty ones permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Special Characters (nasty ones)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;+&lt;/strong&gt; ⇒ One or more&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;?&lt;/strong&gt; ⇒ Zero or one&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;*&lt;/strong&gt; ⇒ &lt;em&gt;Zero or more.&lt;/em&gt; It’s like the combination of + and ?.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;\&lt;/strong&gt; ⇒ escape character&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;[^]&lt;/strong&gt; ⇒ logical not or except&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;|&lt;/strong&gt; (pipe char) ⇒ logical or&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;()&lt;/strong&gt; ⇒ group together&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;^&lt;/strong&gt; ⇒ start of a string.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;$&lt;/strong&gt; ⇒ end of the string.&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Hello World]]></title><description><![CDATA[Hello World]]></description><link>https://abdelrhmansafwat.com/posts/hello-world</link><guid isPermaLink="false">https://abdelrhmansafwat.com/posts/hello-world</guid><pubDate>Sun, 16 Aug 2020 14:52:59 GMT</pubDate><content:encoded>&lt;p&gt;&lt;img src=&quot;/media/hello-world.png&quot; alt=&quot;Hello World&quot;&gt;&lt;/p&gt;</content:encoded></item></channel></rss>