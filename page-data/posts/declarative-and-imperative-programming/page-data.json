{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/declarative-and-imperative-programming","result":{"data":{"markdownRemark":{"id":"aedb3c43-3875-596f-92e5-075af23cb376","html":"<p>This excerpt is taken from Eric Elliot <a href=\"https://medium.com/javascript-scene/master-the-javascript-interview-what-is-functional-programming-7f218c68b3a0\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">article</a> about functional programming. </p>\n<p>Functional programming is a declarative paradigm, meaning that the program logic is expressed without explicitly describing the flow control.</p>\n<p><strong>Imperative</strong> programs spend lines of code describing the specific steps used to achieve the desired results — the <strong>flow control: How</strong> to do things.</p>\n<p><strong>Declarative</strong> programs abstract the flow control process, and instead spend lines of code describing the <strong>data flow: What</strong> to do. The <em>how</em> gets abstracted away.</p>\n<p>For example, this <strong>imperative</strong> mapping takes an array of numbers and returns a new array with each number multiplied by 2:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">doubleMap</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">numbers</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> doubled <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> numbers<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    doubled<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> doubled<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">doubleMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [4, 6, 8]</span></code></pre></div>\n<hr>\n<p>This <strong>declarative</strong> mapping does the same thing, but abstracts the flow control away using the functional <code class=\"language-text\">Array.prototype.map()</code> utility, which allows you to more clearly express the flow of data:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">doubleMap</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">numbers</span> <span class=\"token operator\">=></span> numbers<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span> <span class=\"token operator\">=></span> n <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">doubleMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [4, 6, 8]</span></code></pre></div>\n<p><strong>Imperative</strong> code frequently utilizes statements. A <strong>statement</strong> is a piece of code which performs some action. Examples of commonly used statements include <code class=\"language-text\">for</code>, <code class=\"language-text\">if</code>, <code class=\"language-text\">switch</code>, <code class=\"language-text\">throw</code>, etc…</p>\n<p><strong>Declarative</strong> code relies more on expressions. An <strong>expression</strong> is a piece of code which evaluates to some value. Expressions are usually some combination of function calls, values, and operators which are evaluated to produce the resulting value.</p>","fields":{"slug":"/posts/declarative-and-imperative-programming","tagSlugs":["/tag/functional-programming/","/tag/imperative-programming/","/tag/javascript/","/tag/code-bites/"]},"frontmatter":{"date":"2020-09-09T10:53:18.761Z","description":"Declarative and Imperative Programming","tags":["functional programming","imperative programming","javascript","code bites"],"title":"Declarative and Imperative Programming","socialImage":null}}},"pageContext":{"slug":"/posts/declarative-and-imperative-programming"}},"staticQueryHashes":["251939775","3942705351","401334301"]}